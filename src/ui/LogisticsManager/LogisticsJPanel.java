/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.LogisticsManager;

import java.awt.CardLayout;
import java.util.Map;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.ResourceManager;
import model.ResourceRequest;
import roles.LogisticsManager;
import roles.MedicalOfficer;
import ui.MedicalOfficer.MedicalOfficerJPanel;
import utils.IDGenerator;

/**
 *
 * @author DELL
 */
public class LogisticsJPanel extends javax.swing.JPanel {
        
    private MedicalOfficer medicalOfficer;
    private LogisticsManager logisticsManager;
    private ResourceManager resourceManager;
    private ResourceRequest resourceRequest;
    private JPanel userProcessContainer;
    /**
     * Creates new form LogisticsJPanel
     */
    public LogisticsJPanel(JPanel userProcessContainer,LogisticsManager logisticsManager,MedicalOfficer medicalOfficer, ResourceManager resourceManager,ResourceRequest resourceRequest ) {
         this.logisticsManager = logisticsManager;
        this.resourceManager = resourceManager;
        this.userProcessContainer=userProcessContainer;
        this.medicalOfficer=medicalOfficer;
        this.resourceRequest=resourceRequest;
        initComponents();
        populateRequestsTable1();
        populateAvailableResourcesTable();
        populatePendingRequestsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtResourceType = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        btnaddresource = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRequests = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblAvailableResources = new javax.swing.JTable();
        btnfullfillrequest = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblResourcerequest = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Logistics Manager  Work Area");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Resource Type");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Quantity");

        btnaddresource.setBackground(new java.awt.Color(0, 0, 0));
        btnaddresource.setForeground(new java.awt.Color(255, 255, 255));
        btnaddresource.setText("Add Resource");
        btnaddresource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddresourceActionPerformed(evt);
            }
        });

        tblRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Resource ID", "Resource Type", "Quantity", "Status"
            }
        ));
        jScrollPane3.setViewportView(tblRequests);

        tblAvailableResources.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Resource Type", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblAvailableResources);

        btnfullfillrequest.setBackground(new java.awt.Color(0, 0, 0));
        btnfullfillrequest.setForeground(new java.awt.Color(255, 255, 255));
        btnfullfillrequest.setText("Fullfill Request");
        btnfullfillrequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnfullfillrequestActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Resources");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Pending Requests");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Price");

        tblResourcerequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Resource Type", "Quantity", "Price", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblResourcerequest);

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Resource Request");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1142, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(258, 258, 258))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnaddresource)
                        .addGap(460, 460, 460))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtResourceType)
                            .addComponent(txtQuantity)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(410, 410, 410))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addComponent(btnfullfillrequest)
                        .addGap(132, 132, 132))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtResourceType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(btnaddresource)
                .addGap(29, 29, 29)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnfullfillrequest)
                        .addGap(103, 103, 103))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnaddresourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddresourceActionPerformed
    String resourceType = txtResourceType.getText().trim();
    int quantity;
    double price;

    try {
        quantity = Integer.parseInt(txtQuantity.getText().trim());
        price = Double.parseDouble(jTextField1.getText().trim());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid input. Please enter valid numbers for quantity and price.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (resourceType.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Resource type cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Create a new resource request
     String requestId = UUID.randomUUID().toString();
    ResourceRequest request = new ResourceRequest(
        requestId, // Ensure this is set correctly
        resourceType,
        quantity,
        logisticsManager.getRoleName(), // RequestedBy field
        "LogisticsManager", // Source
        price
    );

    resourceManager.addRequest(request); // Add request to ResourceManager

    JOptionPane.showMessageDialog(this, "Resource request submitted to Finance Manager.", "Success", JOptionPane.INFORMATION_MESSAGE);
    populateRequestsTable1(); // Refresh Logistics Manager's table
    }//GEN-LAST:event_btnaddresourceActionPerformed
    
    private void populatePendingRequestsTable() {
    DefaultTableModel model = (DefaultTableModel) tblRequests.getModel();
    model.setRowCount(0);

    for (ResourceRequest request : resourceManager.getAllRequests()) {
        if ("Pending".equals(request.getStatus())) {
            model.addRow(new Object[]{
                request.getId(),
                request.getResourceType(),
                request.getQuantityRequested(),
                request.getStatus()
            });
        }
    }
}
    private void populateRequestsTable1() {
    DefaultTableModel model = (DefaultTableModel) tblResourcerequest.getModel();
    model.setRowCount(0);

    for (ResourceRequest request : resourceManager.getAllRequests()) {
        if ("Pending".equals(request.getStatus()) && "LogisticsManager".equals(request.getRequestedBy())) {
            model.addRow(new Object[]{
                request.getResourceType(),
                request.getQuantityRequested(),
                request.getPrice(),
                request.getStatus()
            });
        }
    }
}
    private void populateAvailableResourcesTable() {
        DefaultTableModel model = (DefaultTableModel) tblAvailableResources.getModel();
        model.setRowCount(0);
    
        for (String resourceType : resourceManager.listAvailableResources().keySet()) {
            int quantity = resourceManager.getAvailableQuantity(resourceType);
    
            // Debugging log
            System.out.println("Populating table: Resource Type = " + resourceType + ", Quantity = " + quantity);
    
            model.addRow(new Object[]{resourceType, (quantity)});
        }
        
        
}
    private void populateAvailableResourcesTable1() {
        DefaultTableModel model = (DefaultTableModel) tblAvailableResources.getModel();
        model.setRowCount(0);
    
        for (String resourceType : resourceManager.listAvailableResources().keySet()) {
            int quantity = resourceManager.getAvailableQuantity(resourceType);
    
            // Debugging log
            System.out.println("Populating table: Resource Type = " + resourceType + ", Quantity = " + quantity);
    
            model.addRow(new Object[]{resourceType, -(quantity)});
        }
        
        
}
    
    
    private void btnfullfillrequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnfullfillrequestActionPerformed
        int selectedRow = tblRequests.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "No request selected. Please select a request to fulfill.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        String requestId = (String) tblRequests.getValueAt(selectedRow, 0); // Request ID
        int quantity = (int) tblRequests.getValueAt(selectedRow, 2); // Requested Quantity
    
        // Fulfill the request
        boolean success = logisticsManager.fullfilRequest(resourceManager, requestId, quantity);
        if (success) {
            resourceManager.moveApprovedRequestToResources(requestId); // Update available resources
            JOptionPane.showMessageDialog(this, "Request fulfilled successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    
            // Refresh tables
            populateRequestsTable1();
            populateAvailableResourcesTable1();
            populatePendingRequestsTable();
        } else {
            JOptionPane.showMessageDialog(this, "Unable to fulfill the request. Insufficient resources.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnfullfillrequestActionPerformed
    
    
    private void addResource() {
        String resourceType = txtResourceType.getText();
        int quantity;
        try {
            quantity = Integer.parseInt(txtQuantity.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid quantity.");
            return;
        }
        logisticsManager.addResource(resourceManager, resourceType, quantity);
        populateResourcesTable();
    }
private void populateRequestsTable() {
    // Clear tblRequests first
    DefaultTableModel requestsModel = (DefaultTableModel) tblRequests.getModel();
    requestsModel.setRowCount(0);

    // Filter and populate tblRequests with pending requests for the LogisticsManager
    for (ResourceRequest request : resourceManager.getAllRequests()) {
        // Check if the request is for the LogisticsManager
        if ("Medical Officer".equals(request.getRequestedBy()) && "Pending".equals(request.getStatus())) {
            requestsModel.addRow(new Object[]{
                request.getId(),
                request.getResourceType(),
                request.getQuantityRequested(),
                request.getStatus()
            });
        }
    }
}
    private void fulfillRequest() {
        int selectedRow = tblRequests.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "No request selected.");
            return;
        }
        String requestId = (String) tblRequests.getValueAt(selectedRow, 0);
        int quantity = (int) tblRequests.getValueAt(selectedRow, 2);
        logisticsManager.fullfilRequest(resourceManager, requestId, quantity);
        populateRequestsTable();
        populateResourcesTable();
    }

    private void populateResourcesTable() {
        DefaultTableModel model = (DefaultTableModel) tblAvailableResources.getModel();
        model.setRowCount(0);
        for (String resourceType : resourceManager.listAvailableResources().keySet()) {
            model.addRow(new Object[]{resourceType, resourceManager.getAvailableQuantity(resourceType)});
        }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnaddresource;
    private javax.swing.JButton btnfullfillrequest;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tblAvailableResources;
    private javax.swing.JTable tblRequests;
    private javax.swing.JTable tblResourcerequest;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtResourceType;
    // End of variables declaration//GEN-END:variables
}
