/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import Configuration.DisasterReliefNetwork1;
import enterprise.GovernmentAgency;
import enterprise.LogisticsCompany;
import enterprise.MedicalEnterprise;
import enterprise.NGO;
import enterprise.VolunteerEnterprise;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import model.WorkRequest;
import roles.DisasterCoordinator;

/**
 *
 * @author jrswa
 */
public class ReportJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
     private DisasterReliefNetwork1 disasterReliefNetwork;
     private DisasterCoordinator disasterCoordinator;
    public ReportJPanel(DisasterReliefNetwork1 disasterReliefNetwork, DisasterCoordinator disasterCoordinator) {
        initComponents();
          
        this.disasterReliefNetwork = disasterReliefNetwork;
        this.disasterCoordinator = disasterCoordinator;
        populateDisasterTable();
        populateEnterpriseComboBox();
        EnterpriseCombo.addActionListener(evt -> EnterpriseComboActionPerformed(evt));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        EnterpriseCombo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Disastertbl = new javax.swing.JTable();

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        jTable1.setBackground(new java.awt.Color(0, 0, 0));
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Department Name", "Department", "Resources"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        EnterpriseCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        EnterpriseCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterpriseComboActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 102, 102));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Enterprises:");

        Disastertbl.setBackground(new java.awt.Color(0, 0, 0));
        Disastertbl.setForeground(new java.awt.Color(255, 255, 255));
        Disastertbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Disaster Name", "Disaster Description", "Priority"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Disastertbl);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 774, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(EnterpriseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 774, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EnterpriseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(195, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void EnterpriseComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterpriseComboActionPerformed
        // TODO add your handling code here:
       String selectedEnterprise = (String) EnterpriseCombo.getSelectedItem();
       if (selectedEnterprise == null) {
        return; // No selection, exit the method
        }

        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.setRowCount(0);  // Clear existing rows

        
        if (selectedEnterprise.equalsIgnoreCase(disasterReliefNetwork.getGovernmentAgency().getName())) {
            GovernmentAgency governmentAgency = disasterReliefNetwork.getGovernmentAgency();
            addRowToTable(tableModel, "Security Team", governmentAgency.getSecurityTeam().getName(), "Members: " + governmentAgency.getSecurityTeam().getNumberOfOfficers());
            addRowToTable(tableModel, "Government Agent", governmentAgency.getGovernmentAgent().getName(), "");
            addRowToTable(tableModel, "Rescue Team", governmentAgency.getRescueTeam().getName(), "Members: " + governmentAgency.getRescueTeam().getNumberOfRescuers());
            addRowToTable(tableModel, "Finance Department", governmentAgency.getFinanceDepartment().getName(), "Budget: " + governmentAgency.getFinanceDepartment().getBudget());
        } else if (selectedEnterprise.equalsIgnoreCase(disasterReliefNetwork.getNgo().getName())) {
            NGO ngo = disasterReliefNetwork.getNgo();
            addRowToTable(tableModel, "Relief Camp", ngo.getReliefCamp().getName(), "Capacity: " + ngo.getReliefCamp().getCapacity());
            addRowToTable(tableModel, "Rescue Team", ngo.getRescueTeam().getName(), "Members: " + ngo.getRescueTeam().getNumberOfRescuers());
        } else if (selectedEnterprise.equalsIgnoreCase(disasterReliefNetwork.getLogisticsCompany().getName())) {
            LogisticsCompany logisticsCompany = disasterReliefNetwork.getLogisticsCompany();
            addRowToTable(tableModel, "Transportation Unit", logisticsCompany.getTransportationUnit().getName(), "Vehicles: " + logisticsCompany.getTransportationUnit().getNumberOfVehicles());
            addRowToTable(tableModel, "Food Distribution Company", logisticsCompany.getFoodDistributionCompany().getName(), "");
        } else if (selectedEnterprise.equalsIgnoreCase(disasterReliefNetwork.getVolunteerEnterprise().getName())) {
            VolunteerEnterprise volunteerEnterprise = disasterReliefNetwork.getVolunteerEnterprise();
            addRowToTable(tableModel, "Medical Team", volunteerEnterprise.getMedicalTeam().getName(), "Doctors: " + volunteerEnterprise.getMedicalTeam().getNumberOfDoctors());
            addRowToTable(tableModel, "Resource Distribution Center", volunteerEnterprise.getResourceDistributionCenter().getName(), "Inventory: " + volunteerEnterprise.getResourceDistributionCenter().getInventory());
            addRowToTable(tableModel, "Shelter Provider", volunteerEnterprise.getShelterProvider().getName(), "Capacity: " + volunteerEnterprise.getShelterProvider().getCapacity());
        } else if (selectedEnterprise.equalsIgnoreCase(disasterReliefNetwork.getMedicalEnterprise().getName())) {
            MedicalEnterprise medicalEnterprise = disasterReliefNetwork.getMedicalEnterprise();
            addRowToTable(tableModel, "Medical Team", medicalEnterprise.getMedicalTeam().getName(), "Doctors: " + medicalEnterprise.getMedicalTeam().getNumberOfDoctors());
        }
    }//GEN-LAST:event_EnterpriseComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Disastertbl;
    private javax.swing.JComboBox<String> EnterpriseCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void populateEnterpriseComboBox() {
        EnterpriseCombo.removeAllItems();
        EnterpriseCombo.addItem(disasterReliefNetwork.getGovernmentAgency().getName());
        EnterpriseCombo.addItem(disasterReliefNetwork.getNgo().getName());
        EnterpriseCombo.addItem(disasterReliefNetwork.getLogisticsCompany().getName());
        EnterpriseCombo.addItem(disasterReliefNetwork.getVolunteerEnterprise().getName());
        EnterpriseCombo.addItem(disasterReliefNetwork.getMedicalEnterprise().getName());
}
    
    private void addRowToTable(DefaultTableModel tableModel, String departmentName, String department, String resources) {
        tableModel.addRow(new Object[]{departmentName, department, resources});
    }
    
    
    
    
    private void populateDisasterTable() {
        DefaultTableModel tableModel = (DefaultTableModel) Disastertbl.getModel();
        tableModel.setRowCount(0);  // Clear existing rows
           List<WorkRequest> disasters = disasterCoordinator.getDisasters();


        for ( WorkRequest disaster : disasters) {
            tableModel.addRow(new Object[]{
            
               
                disaster.getName(),
                disaster.getDescription(),
                disaster.getPriority()
            });
        }
    }
}
