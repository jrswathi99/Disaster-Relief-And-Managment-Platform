/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.MedicalOfficer;

import java.awt.CardLayout;
import java.util.List;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.ResourceManager;
import model.ResourceRequest;
import roles.LogisticsManager;
import roles.MedicalOfficer;
import ui.LogisticsManager.LogisticsJPanel;
import ui.RoleLoginJPanel;

/**
 *
 * @author DELL
 */
public class MedicalOfficerJPanel extends javax.swing.JPanel {
     private MedicalOfficer medicalOfficer;
    private ResourceManager resourceManager;
    private JPanel userProcessContainer;
    private LogisticsManager logisticsManager;
    private ResourceRequest resourceRequest;
    /**
     * Creates new form MedicalOfficerJPanel
     */
    public MedicalOfficerJPanel(JPanel userProcessContainer,LogisticsManager logisticsManager, MedicalOfficer medicalOfficer, ResourceManager resourceManager,ResourceRequest resourceRequest) {
        initComponents();
        this.medicalOfficer = medicalOfficer;
        this.resourceManager = resourceManager;
        this.userProcessContainer=userProcessContainer;
        this.logisticsManager=logisticsManager;
        this.resourceRequest=resourceRequest;
        populateRequestsTable();
        populateAvailableResourcesTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtResourceType = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnrequestresource = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequests = new javax.swing.JTable();
        btnviewrequests = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtResourceUsageType = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtUsageQuantity = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRequests1 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 102, 102));
        setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Medical Officer  Work Area");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Resource Type");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Quantity");

        btnrequestresource.setBackground(new java.awt.Color(0, 0, 0));
        btnrequestresource.setForeground(new java.awt.Color(255, 255, 255));
        btnrequestresource.setText("Request Resource");
        btnrequestresource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrequestresourceActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Resource Available");

        tblRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Resource type", "Quantity", "Request ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRequests);

        btnviewrequests.setBackground(new java.awt.Color(0, 0, 0));
        btnviewrequests.setForeground(new java.awt.Color(255, 255, 255));
        btnviewrequests.setText("Use Resorce");
        btnviewrequests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnviewrequestsActionPerformed(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Resource type");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Quantity to use");

        tblRequests1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Request ID", "Resource type", "Quantity", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblRequests1);

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Resource Requests");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnrequestresource)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtResourceType)
                                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(315, 315, 315)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(169, 169, 169)
                                .addComponent(btnviewrequests))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtResourceUsageType, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(txtUsageQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(433, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtResourceType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnrequestresource)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtResourceUsageType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtUsageQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnviewrequests)
                .addGap(77, 77, 77))
        );
    }// </editor-fold>//GEN-END:initComponents
    
     private void requestResource() {
         String resourceType = txtResourceType.getText().trim();
    int quantity;
    try {
        quantity = Integer.parseInt(txtQuantity.getText().trim());
        if (quantity <= 0) {
            JOptionPane.showMessageDialog(this, "Quantity must be greater than 0.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a valid number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (resourceType.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Resource type cannot be empty.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Create the resource request and set requestedBy
    String requestId = UUID.randomUUID().toString();
    ResourceRequest newRequest = new ResourceRequest(
            requestId,
        medicalOfficer.getRoleName(),  // requestedBy is the Medical Officer's role name
        resourceType,
        quantity
    );
    resourceManager.addRequest(newRequest); // Add the request to the ResourceManager

    // Update the table
    populateRequestsTable();

    JOptionPane.showMessageDialog(this, "Resource request submitted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
    }

   private void useResource() {
    // Handle resource usage logic
    String resourceType = txtResourceUsageType.getText();
    int quantity;
    try {
        quantity = Integer.parseInt(txtUsageQuantity.getText());
        if (quantity <= 0) {
            JOptionPane.showMessageDialog(this, "Quantity must be greater than 0.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a valid number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (resourceType == null || resourceType.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Resource type cannot be empty.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

    boolean success = medicalOfficer.useResource(resourceManager, resourceType.trim(), quantity);
    if (success) {
        JOptionPane.showMessageDialog(this, "Resource used successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Failed to use the resource. Insufficient quantity.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    private void populateRequestsTable() {
        DefaultTableModel model = (DefaultTableModel) tblRequests1.getModel();
        model.setRowCount(0);
        for (ResourceRequest request : resourceManager.getRequestsByRole(medicalOfficer.getRoleName())) {
            model.addRow(new Object[]{request.getId(), request.getResourceType(), request.getQuantityRequested(), request.getStatus()});
        }
    }
    private void populateAvailableResourcesTable(){
    DefaultTableModel model = (DefaultTableModel) tblRequests.getModel();
    model.setRowCount(0); // Clear the table

    // Fetch fulfilled requests specific to Medical Officer
    List<ResourceRequest> fulfilledRequests = resourceManager.getFulfilledRequestsByRole(medicalOfficer.getRoleName());
    for (ResourceRequest request : fulfilledRequests) {
        model.addRow(new Object[]{
            request.getResourceType(),
            request.getQuantityRequested(),
            request.getId()
        });
 

    }

    // Debugging log
    System.out.println("Populated available resources for Medical Officer: " + fulfilledRequests);
    }
    
    public boolean useResource(ResourceManager resourceManager,String resourceType, int quantity) {
        for (ResourceRequest request : resourceManager.getFulfilledRequestsByRole(medicalOfficer.getRoleName())) {
            if (request.getResourceType().equals(resourceType)) {
                int availableQuantity = request.getQuantityRequested(); // Get available quantity from the request
    
                // Debugging log
                System.out.println("Resource Type: " + resourceType + ", Available Quantity: " + availableQuantity + ", Requested Quantity: " + quantity);
    
                if (availableQuantity >= quantity) {
                    request.setQuantityRequested(availableQuantity - quantity); // Deduct the quantity
                    System.out.println("Resource usage successful. Remaining Quantity: " + (availableQuantity - quantity));
                    return true;
                }
            }
        }
        System.out.println("Insufficient quantity for resource type: " + resourceType);
        return false;
    }
    private void btnviewrequestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnviewrequestsActionPerformed
        // TODO add your handling code here:
          String resourceType = txtResourceUsageType.getText().trim();
    int quantity;
    try {
        quantity = Integer.parseInt(txtUsageQuantity.getText().trim());
        if (quantity <= 0) {
            JOptionPane.showMessageDialog(this, "Quantity must be greater than 0.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a valid number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (resourceType.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Resource type cannot be empty.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

    boolean success = useResource(resourceManager, resourceType, quantity);
    if (success) {
        JOptionPane.showMessageDialog(this, "Resource used successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

        // Refresh the Available Resources table
        populateAvailableResourcesTable();
    } else {
        JOptionPane.showMessageDialog(this, "Failed to use the resource. Insufficient quantity.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnviewrequestsActionPerformed

    private void btnrequestresourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrequestresourceActionPerformed
        String resourceType = txtResourceType.getText().trim();
    int quantity;
    try {
        quantity = Integer.parseInt(txtQuantity.getText().trim());
        if (quantity <= 0) {
            JOptionPane.showMessageDialog(this, "Quantity must be greater than 0.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a valid number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (resourceType.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Resource type cannot be empty.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Create a new request
    
    ResourceRequest request = new ResourceRequest(
            UUID.randomUUID().toString(),
        medicalOfficer.getRoleName(), // Ensure this is set to Medical Officer's role name
        resourceType,
        quantity
    );

    resourceManager.addRequest(request); // Add request to ResourceManager

    JOptionPane.showMessageDialog(this, "Resource request submitted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
    populateRequestsTable(); // Refresh Medical Officer's request table
    }//GEN-LAST:event_btnrequestresourceActionPerformed
   
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnrequestresource;
    private javax.swing.JButton btnviewrequests;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblRequests;
    private javax.swing.JTable tblRequests1;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtResourceType;
    private javax.swing.JTextField txtResourceUsageType;
    private javax.swing.JTextField txtUsageQuantity;
    // End of variables declaration//GEN-END:variables
}
